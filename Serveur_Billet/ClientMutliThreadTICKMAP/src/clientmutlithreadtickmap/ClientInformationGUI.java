/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientmutlithreadtickmap;

import cryptographie.ClientBD;
import cryptographie.CleSecrete;
import cryptographie.CryptageSymetrique;
import cryptographie.KeyStoreUtils;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import static org.bouncycastle.pqc.jcajce.provider.util.CipherSpiExt.ENCRYPT_MODE;
import protocoleTICKMAP.ReponseTICKMAP;
import protocoleTICKMAP.RequeteTICKMAP;
import static protocoleTICKMAP.RequeteTICKMAP.REQUEST_REGISTRATION_FLY;

/**
 *
 * @author Doublon
 */
public class ClientInformationGUI extends javax.swing.JFrame
{
    private static String keyStorePath = System.getProperty("user.dir")+ System.getProperty("file.separator")+"keystore"+System.getProperty("file.separator")+"ClientKeystore.jks";
    private static String keyStoreDirPath = System.getProperty("user.dir")+ System.getProperty("file.separator")+"keystore"+System.getProperty("file.separator");
    private static String keySecretClient = "SecretKeyClient.ser";
    private static String keySecretHmac = "CleSecreteHMACClient.ser";
    private static String keyStorePsw = "123Soleil";
    private static String aliasKeyStrore="clientprivatekey";
    
    private Client client;
    private HashMap<String, Object> Vols;
    private KeyStoreUtils ks;
    private X509Certificate certifServeur;

    /**
     * Creates new form ClientInformationGUI
     */
    public ClientInformationGUI(Client c , HashMap<String, Object> Vols)
    {
        setClient(c);
        setVols(Vols);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabelNom = new javax.swing.JLabel();
        jLabelPrenom = new javax.swing.JLabel();
        jLabelAccompagnant = new javax.swing.JLabel();
        jButtonEnregistrer = new javax.swing.JButton();
        jButtonEffacer = new javax.swing.JButton();
        jTextFieldAccompagnant = new javax.swing.JTextField();
        jTextFieldPrenom = new javax.swing.JTextField();
        jTextFieldNom = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelNom.setText("Nom :");

        jLabelPrenom.setText("Prenom :");

        jLabelAccompagnant.setText("Nombre d'accompagnant :");

        jButtonEnregistrer.setText("Enregistrer");
        jButtonEnregistrer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonEnregistrerActionPerformed(evt);
            }
        });

        jButtonEffacer.setText("Effacer");
        jButtonEffacer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonEffacerActionPerformed(evt);
            }
        });

        jTextFieldAccompagnant.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelNom)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldNom))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelAccompagnant)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldAccompagnant, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelPrenom)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldPrenom))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jButtonEnregistrer)
                        .addGap(47, 47, 47)
                        .addComponent(jButtonEffacer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNom)
                    .addComponent(jTextFieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrenom)
                    .addComponent(jTextFieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAccompagnant)
                    .addComponent(jTextFieldAccompagnant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEnregistrer)
                    .addComponent(jButtonEffacer))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEnregistrerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonEnregistrerActionPerformed
    {//GEN-HEADEREND:event_jButtonEnregistrerActionPerformed
        if(jTextFieldNom.getText().isEmpty() || jTextFieldPrenom.getText().isEmpty())
            JOptionPane.showMessageDialog(this, "Vous devez remplir les champs", "Erreur", JOptionPane.ERROR_MESSAGE);
        else
        {
            CrypteVol(keyStoreDirPath,keySecretClient);
        }
    
    }//GEN-LAST:event_jButtonEnregistrerActionPerformed

    private void jButtonEffacerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonEffacerActionPerformed
    {//GEN-HEADEREND:event_jButtonEffacerActionPerformed
       jTextFieldNom.setText("");
       jTextFieldPrenom.setText("");
    }//GEN-LAST:event_jButtonEffacerActionPerformed

    public void CrypteVol(String path, String nameFile)
    {
        int idVol = (int) getVols().get("IdVol");
        File f = new File(path+nameFile);
        RequeteTICKMAP Req = new RequeteTICKMAP(RequeteTICKMAP.REQUEST_REGISTRATION_FLY);
        ReponseTICKMAP Rep = null;
        
        if(f.exists())
        {
            try
            {
                ObjectInputStream cleFichier =new ObjectInputStream(new FileInputStream(path+nameFile));
                SecretKey keyLoad=(SecretKey) cleFichier.readObject();
                cleFichier.close();
                CleSecrete cleClient=new CleSecrete(keyLoad);
                
                ClientBD clientbd = new ClientBD(jTextFieldNom.getText(),jTextFieldPrenom.getText(),Integer.parseInt(jTextFieldAccompagnant.getText()));
                try
                {
                    System.out.println("cryptage du vol...");
                    CryptageSymetrique cryptage = new CryptageSymetrique();
                    //byte[] b = (Integer.toString(idVol)).getBytes();
                    byte[] idVolCrypte = cryptage.Crypte(keyLoad,(Integer.toString(idVol)).getBytes());
                    
                    System.out.println("cryptage du client...");
                    Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding","BC");
                    chiffrement.init(ENCRYPT_MODE, keyLoad);
                    SealedObject sealed = new SealedObject(clientbd, chiffrement);
                    
                    Req.getChargeUtile().put("IdVol",idVolCrypte);
                    Req.getChargeUtile().put("clientBD", sealed);
                    getClient().EnvoyerRequete(Req);
                    Rep = getClient().RecevoirReponse();
                    if(Rep.getCode() == ReponseTICKMAP.REQUEST_REGISTRATION_FLY_OK)
                    {
                        byte[] factureCrypte = (byte[]) Rep.getChargeUtile().get("Facture");
                        byte[] factureDecrypte = cryptage.Decrypte(keyLoad, factureCrypte);
                        String factureStr = new String(factureDecrypte);
                        int facture= Integer.parseInt(factureStr);
                        System.out.println("Facture a payé : "+facture);
                    }
                    else if (Rep.getCode() == ReponseTICKMAP.REQUEST_REGISTRATION_FLY_KO)
                    {
                        JOptionPane.showMessageDialog(this, Rep.getChargeUtile().get("Message"), "Erreur", JOptionPane.ERROR_MESSAGE);                        
                    }
                    
                } catch (IllegalBlockSizeException ex)
                {
                    Logger.getLogger(ClientInformationGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex)
                {
                    Logger.getLogger(ClientInformationGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchProviderException ex)
                {
                    Logger.getLogger(ClientInformationGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchPaddingException ex)
                {
                    Logger.getLogger(ClientInformationGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeyException ex)
                {
                    Logger.getLogger(ClientInformationGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadPaddingException ex)
                {
                    Logger.getLogger(ClientInformationGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex)
            {
                Logger.getLogger(AuthentificationGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex)
            {
                Logger.getLogger(AuthentificationGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ClientInformationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ClientInformationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ClientInformationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ClientInformationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ClientInformationGUI(null,null).setVisible(true);
            }
        });
    }

    public Client getClient()
    {
        return client;
    }

    public void setClient(Client client)
    {
        this.client = client;
    }

    public HashMap<String, Object> getVols()
    {
        return Vols;
    }

    public void setVols(HashMap<String, Object> Vols)
    {
        this.Vols = Vols;
    }

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEffacer;
    private javax.swing.JButton jButtonEnregistrer;
    private javax.swing.JLabel jLabelAccompagnant;
    private javax.swing.JLabel jLabelNom;
    private javax.swing.JLabel jLabelPrenom;
    private javax.swing.JTextField jTextFieldAccompagnant;
    private javax.swing.JTextField jTextFieldNom;
    private javax.swing.JTextField jTextFieldPrenom;
    // End of variables declaration//GEN-END:variables
}
